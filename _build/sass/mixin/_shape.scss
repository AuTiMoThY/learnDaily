//========================================================================*\
//	>	Shape
//========================================================================*/
@mixin circle($width, $height:$width) {
	@if (unitless($width)) {
		$width: $width * 1px;
	}
	@if (unitless($height)) {
		$height: $height * 1px;
	}
	width: $width;
	height: $height;
	border-radius: 50%;
}
@mixin triPrev($color, $w, $w2:(($w * 2) - 3px)) {
	@include wh(0);
	border: {
		style: solid;
		width: $w $w2 $w 0;
		color: transparent $color transparent transparent;
	}
}
@mixin triNext($color, $w, $w2:(($w * 2) - 3px)) {
	@include wh(0);
	border: {
		style: solid;
		width: $w 0 $w $w2;
		color: transparent transparent transparent $color;
	}
}
@mixin triBtm($color, $w, $w2:(($w * 2) - 3px)) {
	@include wh(0);
	border: {
		style: solid;
		width: $w2 $w 0 $w;
		color: $color transparent transparent transparent;
	}
}
@mixin triTop($color, $w, $w2:(($w * 2) - 3px)) {
	@include wh(0);
	border: {
		style: solid;
		width: 0 $w $w2 $w;
		color: transparent transparent $color transparent;
	}
}

/// Triangle helper mixin
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color 
/// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  width: 0;
  height: 0;
  content: '';
  z-index: 2;
  border-#{opposite-position($direction)}: ($size * 1.5) solid $color;
  
  $perpendicular-borders: $size solid transparent;
  
  @if $direction == top or $direction == bottom {
    border-left:   $perpendicular-borders;
    border-right:  $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top:    $perpendicular-borders;
  }
}
